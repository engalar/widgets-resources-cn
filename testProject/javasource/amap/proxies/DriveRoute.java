// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package amap.proxies;

public class DriveRoute
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject driveRouteMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "AMap.DriveRoute";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		restriction("restriction"),
		policy("policy"),
		DriveRoute_DrivingResult("AMap.DriveRoute_DrivingResult"),
		DriveRoute_DriveStep_focus("AMap.DriveRoute_DriveStep_focus");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public DriveRoute(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "AMap.DriveRoute"));
	}

	protected DriveRoute(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject driveRouteMendixObject)
	{
		if (driveRouteMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("AMap.DriveRoute", driveRouteMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a AMap.DriveRoute");

		this.driveRouteMendixObject = driveRouteMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'DriveRoute.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static amap.proxies.DriveRoute initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return amap.proxies.DriveRoute.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static amap.proxies.DriveRoute initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new amap.proxies.DriveRoute(context, mendixObject);
	}

	public static amap.proxies.DriveRoute load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return amap.proxies.DriveRoute.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of restriction
	 */
	public final java.lang.Boolean getrestriction()
	{
		return getrestriction(getContext());
	}

	/**
	 * @param context
	 * @return value of restriction
	 */
	public final java.lang.Boolean getrestriction(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.restriction.toString());
	}

	/**
	 * Set value of restriction
	 * @param restriction
	 */
	public final void setrestriction(java.lang.Boolean restriction)
	{
		setrestriction(getContext(), restriction);
	}

	/**
	 * Set value of restriction
	 * @param context
	 * @param restriction
	 */
	public final void setrestriction(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean restriction)
	{
		getMendixObject().setValue(context, MemberNames.restriction.toString(), restriction);
	}

	/**
	 * Set value of policy
	 * @param policy
	 */
	public final amap.proxies.DrivingPolicy getpolicy()
	{
		return getpolicy(getContext());
	}

	/**
	 * @param context
	 * @return value of policy
	 */
	public final amap.proxies.DrivingPolicy getpolicy(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.policy.toString());
		if (obj == null)
			return null;

		return amap.proxies.DrivingPolicy.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of policy
	 * @param policy
	 */
	public final void setpolicy(amap.proxies.DrivingPolicy policy)
	{
		setpolicy(getContext(), policy);
	}

	/**
	 * Set value of policy
	 * @param context
	 * @param policy
	 */
	public final void setpolicy(com.mendix.systemwideinterfaces.core.IContext context, amap.proxies.DrivingPolicy policy)
	{
		if (policy != null)
			getMendixObject().setValue(context, MemberNames.policy.toString(), policy.toString());
		else
			getMendixObject().setValue(context, MemberNames.policy.toString(), null);
	}

	/**
	 * @return value of DriveRoute_DrivingResult
	 */
	public final amap.proxies.DrivingResult getDriveRoute_DrivingResult() throws com.mendix.core.CoreException
	{
		return getDriveRoute_DrivingResult(getContext());
	}

	/**
	 * @param context
	 * @return value of DriveRoute_DrivingResult
	 */
	public final amap.proxies.DrivingResult getDriveRoute_DrivingResult(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		amap.proxies.DrivingResult result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DriveRoute_DrivingResult.toString());
		if (identifier != null)
			result = amap.proxies.DrivingResult.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DriveRoute_DrivingResult
	 * @param driveroute_drivingresult
	 */
	public final void setDriveRoute_DrivingResult(amap.proxies.DrivingResult driveroute_drivingresult)
	{
		setDriveRoute_DrivingResult(getContext(), driveroute_drivingresult);
	}

	/**
	 * Set value of DriveRoute_DrivingResult
	 * @param context
	 * @param driveroute_drivingresult
	 */
	public final void setDriveRoute_DrivingResult(com.mendix.systemwideinterfaces.core.IContext context, amap.proxies.DrivingResult driveroute_drivingresult)
	{
		if (driveroute_drivingresult == null)
			getMendixObject().setValue(context, MemberNames.DriveRoute_DrivingResult.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DriveRoute_DrivingResult.toString(), driveroute_drivingresult.getMendixObject().getId());
	}

	/**
	 * @return value of DriveRoute_DriveStep_focus
	 */
	public final amap.proxies.DriveStep getDriveRoute_DriveStep_focus() throws com.mendix.core.CoreException
	{
		return getDriveRoute_DriveStep_focus(getContext());
	}

	/**
	 * @param context
	 * @return value of DriveRoute_DriveStep_focus
	 */
	public final amap.proxies.DriveStep getDriveRoute_DriveStep_focus(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		amap.proxies.DriveStep result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DriveRoute_DriveStep_focus.toString());
		if (identifier != null)
			result = amap.proxies.DriveStep.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DriveRoute_DriveStep_focus
	 * @param driveroute_drivestep_focus
	 */
	public final void setDriveRoute_DriveStep_focus(amap.proxies.DriveStep driveroute_drivestep_focus)
	{
		setDriveRoute_DriveStep_focus(getContext(), driveroute_drivestep_focus);
	}

	/**
	 * Set value of DriveRoute_DriveStep_focus
	 * @param context
	 * @param driveroute_drivestep_focus
	 */
	public final void setDriveRoute_DriveStep_focus(com.mendix.systemwideinterfaces.core.IContext context, amap.proxies.DriveStep driveroute_drivestep_focus)
	{
		if (driveroute_drivestep_focus == null)
			getMendixObject().setValue(context, MemberNames.DriveRoute_DriveStep_focus.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DriveRoute_DriveStep_focus.toString(), driveroute_drivestep_focus.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return driveRouteMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final amap.proxies.DriveRoute that = (amap.proxies.DriveRoute) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "AMap.DriveRoute";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
