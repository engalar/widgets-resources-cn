// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package amap.proxies;

/**
 * 根据路径规划
 */
public class Path extends amap.proxies.LngLat
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "AMap.Path";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		pid("pid"),
		_type("_type"),
		Lat("Lat"),
		Lng("Lng"),
		LngLat_DriveStep_path("AMap.LngLat_DriveStep_path"),
		DrivingOptions_LngLat_Source("AMap.DrivingOptions_LngLat_Source"),
		DrivingOptions_LngLat_Destination("AMap.DrivingOptions_LngLat_Destination");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Path(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "AMap.Path"));
	}

	protected Path(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject pathMendixObject)
	{
		super(context, pathMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("AMap.Path", pathMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a AMap.Path");
	}

	/**
	 * @deprecated Use 'Path.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static amap.proxies.Path initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return amap.proxies.Path.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static amap.proxies.Path initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new amap.proxies.Path(context, mendixObject);
	}

	public static amap.proxies.Path load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return amap.proxies.Path.initialize(context, mendixObject);
	}

	/**
	 * @return value of pid
	 */
	public final java.lang.String getpid()
	{
		return getpid(getContext());
	}

	/**
	 * @param context
	 * @return value of pid
	 */
	public final java.lang.String getpid(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.pid.toString());
	}

	/**
	 * Set value of pid
	 * @param pid
	 */
	public final void setpid(java.lang.String pid)
	{
		setpid(getContext(), pid);
	}

	/**
	 * Set value of pid
	 * @param context
	 * @param pid
	 */
	public final void setpid(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String pid)
	{
		getMendixObject().setValue(context, MemberNames.pid.toString(), pid);
	}

	/**
	 * @return value of _type
	 */
	public final java.lang.String get_type()
	{
		return get_type(getContext());
	}

	/**
	 * @param context
	 * @return value of _type
	 */
	public final java.lang.String get_type(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames._type.toString());
	}

	/**
	 * Set value of _type
	 * @param _type
	 */
	public final void set_type(java.lang.String _type)
	{
		set_type(getContext(), _type);
	}

	/**
	 * Set value of _type
	 * @param context
	 * @param _type
	 */
	public final void set_type(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String _type)
	{
		getMendixObject().setValue(context, MemberNames._type.toString(), _type);
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final amap.proxies.Path that = (amap.proxies.Path) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "AMap.Path";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
